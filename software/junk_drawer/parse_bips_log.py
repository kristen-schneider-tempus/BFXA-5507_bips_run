# a collection of functions which parse the log files generated by the BIPS software

from collections import defaultdict
import json
import numpy as np
import pandas as pd
import sys

def main():
    # check length of sys.argv
    if len(sys.argv) < 2:
        print('Usage: python parse_bips_log.py <case> <arg1> <arg2> ...')
        sys.exit(1)
    
    # run different functions based on sys.argv[1]
    case = sys.argv[1]
    print(case)
    if case == 'run_id':
        bips_log = sys.argv[2]
        id_type = sys.argv[3]
        run_ids_txt = sys.argv[4]

        run_id = get_run_id(bips_log)
        with open(run_ids_txt, 'a') as f:
            f.write(run_id)
            f.write('\n')

    elif case == 'data_products':
        run_ids_txt = sys.argv[2]
        data_prodcut_dir = sys.argv[3]
        data_products = get_data_products(run_ids_txt)
    
    return 0

def get_run_id(bips_log,
               id='analysis'):
    """
    get the run id (analysis or execution) from a single log file
    
    @param bips_log: str, path to the log file (JSON)
    @param id: str, 'analysis' or 'execution', default is 'analysis'
    @return run_id: str, the run id
    """

    # analysis id = analysis.id
    # execution id = execution.id (TODO: check this)

    with open(bips_log, 'r') as f:
        data = json.load(f)
        run_id = data[id]['id']
    print(run_id)
    return run_id

def get_data_products(run_ids_txt):
    """
    get the data products from the log files
    
    @param run_ids_txt: str, path to the text file containing the run ids
    @return data_products: dict, a dictionary containing the data products
    """

    # {run_id: {data_product: [workflow, version], ...}, ...}
    data_products = defaultdict(dict)
    with open(run_ids_txt, 'r') as f:
        for line in f:
            run_id = line.strip()
            data_products[run_id] = get_data_products_by_run_id(run_id)
    return data_products

def get_data_products_by_run_id(run_id):
    

if __name__ == '__main__':
    main()



